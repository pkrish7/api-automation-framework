<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/test/java/mocks/WireMockServerSetup.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/mocks/WireMockServerSetup.java" />
              <option name="originalContent" value="package mocks;&#10;&#10;import com.github.tomakehurst.wiremock.WireMockServer;&#10;import com.github.tomakehurst.wiremock.client.WireMock;&#10;import com.github.tomakehurst.wiremock.core.WireMockConfiguration;&#10;&#10;import static com.github.tomakehurst.wiremock.client.WireMock.*;&#10;&#10;public class WireMockServerSetup {&#10;    private static WireMockServer wireMockServer;&#10;&#10;    public static void startServer() {&#10;        wireMockServer = new WireMockServer(WireMockConfiguration.options().port(9090));&#10;        wireMockServer.start();&#10;        WireMock.configureFor(&quot;localhost&quot;, 9090);&#10;        setupStubs();&#10;    }&#10;&#10;    public static void stopServer() {&#10;        if (wireMockServer != null) {&#10;            wireMockServer.stop();&#10;        }&#10;    }&#10;&#10;    private static void setupStubs() {&#10;        // GET /employees&#10;        WireMock.stubFor(WireMock.get(urlEqualTo(&quot;/employees&quot;))&#10;            .willReturn(aResponse()&#10;                .withStatus(200)&#10;                .withHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                    .withBody(&quot;[{\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;John Doe\&quot;,\&quot;role\&quot;:\&quot;Developer\&quot;},{\&quot;id\&quot;:2,\&quot;name\&quot;:\&quot;Jane Smith\&quot;,\&quot;role\&quot;:\&quot;Tester\&quot;}]&quot;)&#10;            )&#10;        );&#10;&#10;        WireMock.stubFor(WireMock.get(urlEqualTo(&quot;/employees/1&quot;))&#10;                .willReturn(aResponse()&#10;                        .withStatus(200)&#10;                        .withHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                        .withBody(&quot;{\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;John Doe\&quot;,\&quot;role\&quot;:\&quot;Developer\&quot;}&quot;)&#10;                )&#10;        );&#10;&#10;        WireMock.stubFor(WireMock.get(urlEqualTo(&quot;/employees/999&quot;))&#10;                .willReturn(aResponse()&#10;                        .withStatus(404)&#10;                        .withHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                        .withBody(&quot;{\&quot;error\&quot;:\&quot;Employee not found\&quot;}&quot;)&#10;                )&#10;        );&#10;&#10;        // POST /employees&#10;        WireMock.stubFor(post(urlEqualTo(&quot;/employees&quot;))&#10;            .willReturn(aResponse()&#10;                .withStatus(201)&#10;                .withHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                .withBody(&quot;{\&quot;id\&quot;:3,\&quot;name\&quot;:\&quot;Alice Brown\&quot;,\&quot;role\&quot;:\&quot;Manager\&quot;}&quot;)&#10;            )&#10;        );&#10;&#10;        // POST /employees - 400 Bad Request&#10;        WireMock.stubFor(post(urlEqualTo(&quot;/employees&quot;))&#10;                .withRequestBody(equalToJson(&quot;{\&quot;name\&quot;:\&quot;\&quot;}&quot;))&#10;                .willReturn(aResponse()&#10;                        .withStatus(400)&#10;                        .withHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                        .withBody(&quot;{\&quot;error\&quot;:\&quot;Invalid payload\&quot;}&quot;)&#10;                )&#10;        );&#10;&#10;        // PUT /employees/1&#10;        stubFor(put(urlEqualTo(&quot;/employees/1&quot;))&#10;            .willReturn(aResponse()&#10;                .withStatus(200)&#10;                .withHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                .withBody(&quot;{\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;John Doe Updated\&quot;,\&quot;role\&quot;:\&quot;Lead\&quot;}&quot;)&#10;            )&#10;        );&#10;&#10;        // PUT /employees/999 - 404 Not Found&#10;        stubFor(put(urlEqualTo(&quot;/employees/999&quot;))&#10;            .willReturn(aResponse()&#10;                .withStatus(404)&#10;                .withHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                .withBody(&quot;{\&quot;error\&quot;:\&quot;Employee not found\&quot;}&quot;)&#10;            )&#10;        );&#10;&#10;        // PUT /employees/1 - 400 Bad Request for invalid payload&#10;        stubFor(put(urlEqualTo(&quot;/employees/1&quot;))&#10;                .withRequestBody(equalToJson(&quot;{\&quot;name\&quot;:\&quot;\&quot;}&quot;))&#10;                .willReturn(aResponse()&#10;                        .withStatus(400)&#10;                        .withHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                        .withBody(&quot;{\&quot;error\&quot;:\&quot;Invalid payload\&quot;}&quot;)&#10;                )&#10;        );&#10;&#10;//        // DELETE /employees/{id}&#10;//        stubFor(delete(urlMatching(&quot;/employees/\\d+&quot;))&#10;//            .willReturn(aResponse()&#10;//                .withStatus(204)&#10;//            )&#10;//        );&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package mocks;&#10;&#10;import com.github.tomakehurst.wiremock.WireMockServer;&#10;import com.github.tomakehurst.wiremock.client.WireMock;&#10;import com.github.tomakehurst.wiremock.core.WireMockConfiguration;&#10;&#10;import static com.github.tomakehurst.wiremock.client.WireMock.*;&#10;&#10;public class WireMockServerSetup {&#10;    private static WireMockServer wireMockServer;&#10;&#10;    public static void startServer() {&#10;        wireMockServer = new WireMockServer(WireMockConfiguration.options().port(9090));&#10;        wireMockServer.start();&#10;        WireMock.configureFor(&quot;localhost&quot;, 9090);&#10;        setupStubs();&#10;    }&#10;&#10;    public static void stopServer() {&#10;        if (wireMockServer != null) {&#10;            wireMockServer.stop();&#10;        }&#10;    }&#10;&#10;    private static void setupStubs() {&#10;        // GET /employees&#10;        WireMock.stubFor(WireMock.get(urlEqualTo(&quot;/employees&quot;))&#10;            .willReturn(aResponse()&#10;                .withStatus(200)&#10;                .withHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                    .withBody(&quot;[{\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;John Doe\&quot;,\&quot;role\&quot;:\&quot;Developer\&quot;},{\&quot;id\&quot;:2,\&quot;name\&quot;:\&quot;Jane Smith\&quot;,\&quot;role\&quot;:\&quot;Tester\&quot;}]&quot;)&#10;            )&#10;        );&#10;&#10;        WireMock.stubFor(WireMock.get(urlEqualTo(&quot;/employees/1&quot;))&#10;                .willReturn(aResponse()&#10;                        .withStatus(200)&#10;                        .withHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                        .withBody(&quot;{\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;John Doe\&quot;,\&quot;role\&quot;:\&quot;Developer\&quot;}&quot;)&#10;                )&#10;        );&#10;&#10;        WireMock.stubFor(WireMock.get(urlEqualTo(&quot;/employees/999&quot;))&#10;                .willReturn(aResponse()&#10;                        .withStatus(404)&#10;                        .withHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                        .withBody(&quot;{\&quot;error\&quot;:\&quot;Employee not found\&quot;}&quot;)&#10;                )&#10;        );&#10;&#10;        // POST /employees&#10;        WireMock.stubFor(post(urlEqualTo(&quot;/employees&quot;))&#10;            .willReturn(aResponse()&#10;                .withStatus(201)&#10;                .withHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                .withBody(&quot;{\&quot;id\&quot;:3,\&quot;name\&quot;:\&quot;Alice Brown\&quot;,\&quot;role\&quot;:\&quot;Manager\&quot;}&quot;)&#10;            )&#10;        );&#10;&#10;        // POST /employees - 400 Bad Request&#10;        WireMock.stubFor(post(urlEqualTo(&quot;/employees&quot;))&#10;                .withRequestBody(equalToJson(&quot;{\&quot;name\&quot;:\&quot;\&quot;}&quot;))&#10;                .willReturn(aResponse()&#10;                        .withStatus(400)&#10;                        .withHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                        .withBody(&quot;{\&quot;error\&quot;:\&quot;Invalid payload\&quot;}&quot;)&#10;                )&#10;        );&#10;&#10;        // PUT /employees/1&#10;        stubFor(put(urlEqualTo(&quot;/employees/1&quot;))&#10;            .willReturn(aResponse()&#10;                .withStatus(200)&#10;                .withHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                .withBody(&quot;{\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;John Doe Updated\&quot;,\&quot;role\&quot;:\&quot;Lead\&quot;}&quot;)&#10;            )&#10;        );&#10;&#10;        // PUT /employees/999 - 404 Not Found&#10;        stubFor(put(urlEqualTo(&quot;/employees/999&quot;))&#10;            .willReturn(aResponse()&#10;                .withStatus(404)&#10;                .withHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                .withBody(&quot;{\&quot;error\&quot;:\&quot;Employee not found\&quot;}&quot;)&#10;            )&#10;        );&#10;&#10;        // PUT /employees/1 - 400 Bad Request for invalid payload&#10;        stubFor(put(urlEqualTo(&quot;/employees/1&quot;))&#10;                .withRequestBody(equalToJson(&quot;{\&quot;name\&quot;:\&quot;\&quot;}&quot;))&#10;                .willReturn(aResponse()&#10;                        .withStatus(400)&#10;                        .withHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                        .withBody(&quot;{\&quot;error\&quot;:\&quot;Invalid payload\&quot;}&quot;)&#10;                )&#10;        );&#10;&#10;        // DELETE /employees/1 - Success&#10;        stubFor(delete(urlEqualTo(&quot;/employees/1&quot;))&#10;            .willReturn(aResponse()&#10;                .withStatus(204)&#10;            )&#10;        );&#10;&#10;        // DELETE /employees/999 - Not Found&#10;        stubFor(delete(urlEqualTo(&quot;/employees/999&quot;))&#10;            .willReturn(aResponse()&#10;                .withStatus(404)&#10;                .withHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                .withBody(&quot;{\&quot;error\&quot;:\&quot;invalid id\&quot;}&quot;)&#10;            )&#10;        );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/steps/EmployeeSteps.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/steps/EmployeeSteps.java" />
              <option name="originalContent" value="package steps;&#10;&#10;import config.TestConfig;&#10;import io.cucumber.java.en.And;&#10;import io.cucumber.java.en.Given;&#10;import io.cucumber.java.en.Then;&#10;import io.cucumber.java.en.When;&#10;import io.restassured.response.Response;&#10;import org.testng.Assert;&#10;import org.testng.annotations.AfterClass;&#10;import org.testng.annotations.BeforeClass;&#10;&#10;import static io.restassured.RestAssured.given;&#10;&#10;public class EmployeeSteps {&#10;    private int responseCode;&#10;    private String responseBody;&#10;    private Response response;&#10;&#10;    @BeforeClass&#10;    public void startWireMockServer() {&#10;        TestConfig.startWireMock();&#10;    }&#10;&#10;    @AfterClass&#10;    public void stopWireMockServer() {&#10;        TestConfig.stopWireMock();&#10;    }&#10;&#10;    // CREATE EMPLOYEE STEPS&#10;    @When(&quot;I send a POST request to {string}&quot;)&#10;    public void sendPostRequestToEmployees(String endpoint) {&#10;        String payload = &quot;{ \&quot;name\&quot;: \&quot;Alice Brown\&quot;, \&quot;role\&quot;: \&quot;Manager\&quot; }&quot;;&#10;        response = given()&#10;                .header(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                .body(payload)&#10;                .post(TestConfig.BASE_URL + endpoint);&#10;        responseCode = response.getStatusCode();&#10;        responseBody = response.getBody().asString();&#10;    }&#10;&#10;    @And(&quot;the response should contain the employee details&quot;)&#10;    public void verifyResponseContainsEmployeeDetails() {&#10;        String name = response.jsonPath().getString(&quot;name&quot;);&#10;        String role = response.jsonPath().getString(&quot;role&quot;);&#10;        Assert.assertEquals(name, &quot;Alice Brown&quot;);&#10;        Assert.assertEquals(role, &quot;Manager&quot;);&#10;    }&#10;&#10;    // SCENARIO: Fail to create employee with missing fields&#10;    @When(&quot;I send a POST request to {string} with a payload that is missing required employee fields&quot;)&#10;    public void sendPostRequestWithMissingFields(String endpoint) {&#10;        String payload = &quot;{\&quot;name\&quot;:\&quot;\&quot;}&quot;;&#10;        Response response = given()&#10;                .contentType(&quot;application/json&quot;)&#10;                .body(payload)&#10;                .post(TestConfig.BASE_URL + endpoint);&#10;        responseCode = response.getStatusCode();&#10;        responseBody = response.getBody().asString();&#10;    }&#10;&#10;    @And(&quot;the response should contain an error message stating invalid payload&quot;)&#10;    public void verifyInvalidPayloadErrorMessage() {&#10;        Assert.assertEquals(responseBody, &quot;{\&quot;error\&quot;:\&quot;Invalid payload\&quot;}&quot;);&#10;    }&#10;&#10;    @And(&quot;the response should include an error message stating that the employee was not found&quot;)&#10;    public void verifyEmployeeNotFoundErrorMessage() {&#10;        Assert.assertEquals(responseBody, &quot;{\&quot;error\&quot;:\&quot;Employee not found\&quot;}&quot;);&#10;    }&#10;&#10;    // READ EMPLOYEE STEPS&#10;    @When(&quot;I send a GET request to the employees API&quot;)&#10;    public void sendGetRequestToEmployeesApi() {&#10;        response = given()&#10;                .get(TestConfig.BASE_URL + &quot;/employees&quot;);&#10;        responseCode = response.getStatusCode();&#10;        responseBody = response.getBody().asString();&#10;    }&#10;&#10;    @Then(&quot;the response status should be {int}&quot;)&#10;    public void verifyResponseStatusCode(Integer statusCode) {&#10;        Assert.assertEquals(responseCode, statusCode.intValue());&#10;    }&#10;&#10;    @Then(&quot;the response should contain a list of employees&quot;)&#10;    public void verifyResponseContainsListOfEmployees() {&#10;        Assert.assertEquals(responseBody, &quot;[{\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;John Doe\&quot;,\&quot;role\&quot;:\&quot;Developer\&quot;},{\&quot;id\&quot;:2,\&quot;name\&quot;:\&quot;Jane Smith\&quot;,\&quot;role\&quot;:\&quot;Tester\&quot;}]&quot;);&#10;    }&#10;&#10;    @Given(&quot;an employee with id {int} exists&quot;)&#10;    public void ensureEmployeeWithidExists(int id) {&#10;        // This is left empty as WireMock is preconfigured&#10;    }&#10;&#10;    @Given(&quot;an existing employee with id {int}&quot;)&#10;    public void anExistingEmployeeWithId(int id) {&#10;        // No implementation needed, WireMock is preconfigured&#10;    }&#10;&#10;    @When(&quot;I send a GET request to the employee API with id {int}&quot;)&#10;    public void sendGetRequestToEmployeeApiWithid(int id) {&#10;        response = given()&#10;                .get(TestConfig.BASE_URL + &quot;/employees/&quot; + id);&#10;        responseCode = response.getStatusCode();&#10;        responseBody = response.getBody().asString();&#10;    }&#10;&#10;    @Then(&quot;the response should contain the employee details for id {int}&quot;)&#10;    public void verifyResponseContainsEmployeeDetailsForid(int id) {&#10;        Assert.assertEquals(responseBody, &quot;{\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;John Doe\&quot;,\&quot;role\&quot;:\&quot;Developer\&quot;}&quot;);&#10;    }&#10;&#10;    @When(&quot;I send a GET request to the employee API with a non-existent id {int}&quot;)&#10;    public void sendGetRequestToEmployeeApiWithNonExistentid(int id) {&#10;        response = given()&#10;                .get(TestConfig.BASE_URL + &quot;/employees/&quot; + id);&#10;        responseCode = response.getStatusCode();&#10;        responseBody = response.getBody().asString();&#10;    }&#10;&#10;    @Then(&quot;the response should contain an error message indicating the employee was not found&quot;)&#10;    public void verifyResponseContainsEmployeeNotFoundError() {&#10;        Assert.assertEquals(responseBody, (&quot;{\&quot;error\&quot;:\&quot;Employee not found\&quot;}&quot;));&#10;    }&#10;&#10;    @And(&quot;the update payload is valid&quot;)&#10;    public void updatePayloadIsValid() {&#10;        responseBody = &quot;{ \&quot;name\&quot;: \&quot;John Doe Updated\&quot;, \&quot;role\&quot;: \&quot;Lead\&quot; }&quot;;&#10;    }&#10;&#10;    @When(&quot;I send a PUT request to {string} with id {int}&quot;)&#10;    public void sendPutRequestToUpdateEmployee(String endpoint, int id) {&#10;        response = given()&#10;                .header(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                .body(responseBody)&#10;                .put(TestConfig.BASE_URL + endpoint + &quot;/&quot; + id);&#10;        responseCode = response.getStatusCode();&#10;        responseBody = response.getBody().asString();&#10;    }&#10;&#10;    @And(&quot;the response should contain the updated employee details&quot;)&#10;    public void verifyResponseContainsUpdatedEmployeeDetails() {&#10;        String name = response.jsonPath().getString(&quot;name&quot;);&#10;        String role = response.jsonPath().getString(&quot;role&quot;);&#10;        Assert.assertEquals(name, &quot;John Doe Updated&quot;);&#10;        Assert.assertEquals(role, &quot;Lead&quot;);&#10;    }&#10;&#10;    @Given(&quot;no employee exists with id {int}&quot;)&#10;    public void noEmployeeExistsWithId(int id) {&#10;        // No implementation needed, WireMock is preconfigured for 404&#10;    }&#10;&#10;    @And(&quot;the update payload is missing required fields&quot;)&#10;    public void updatePayloadIsMissingRequiredFields() {&#10;        responseBody = &quot;{ \&quot;name\&quot;: \&quot;\&quot; }&quot;;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package steps;&#10;&#10;import config.TestConfig;&#10;import io.cucumber.java.en.And;&#10;import io.cucumber.java.en.Given;&#10;import io.cucumber.java.en.Then;&#10;import io.cucumber.java.en.When;&#10;import io.restassured.response.Response;&#10;import org.testng.Assert;&#10;import org.testng.annotations.AfterClass;&#10;import org.testng.annotations.BeforeClass;&#10;&#10;import static io.restassured.RestAssured.given;&#10;&#10;public class EmployeeSteps {&#10;    private int responseCode;&#10;    private String responseBody;&#10;    private Response response;&#10;&#10;    @BeforeClass&#10;    public void startWireMockServer() {&#10;        TestConfig.startWireMock();&#10;    }&#10;&#10;    @AfterClass&#10;    public void stopWireMockServer() {&#10;        TestConfig.stopWireMock();&#10;    }&#10;&#10;    // CREATE EMPLOYEE STEPS&#10;    @When(&quot;I send a POST request to {string}&quot;)&#10;    public void sendPostRequestToEmployees(String endpoint) {&#10;        String payload = &quot;{ \&quot;name\&quot;: \&quot;Alice Brown\&quot;, \&quot;role\&quot;: \&quot;Manager\&quot; }&quot;;&#10;        response = given()&#10;                .header(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                .body(payload)&#10;                .post(TestConfig.BASE_URL + endpoint);&#10;        responseCode = response.getStatusCode();&#10;        responseBody = response.getBody().asString();&#10;    }&#10;&#10;    @And(&quot;the response should contain the employee details&quot;)&#10;    public void verifyResponseContainsEmployeeDetails() {&#10;        String name = response.jsonPath().getString(&quot;name&quot;);&#10;        String role = response.jsonPath().getString(&quot;role&quot;);&#10;        Assert.assertEquals(name, &quot;Alice Brown&quot;);&#10;        Assert.assertEquals(role, &quot;Manager&quot;);&#10;    }&#10;&#10;    // SCENARIO: Fail to create employee with missing fields&#10;    @When(&quot;I send a POST request to {string} with a payload that is missing required employee fields&quot;)&#10;    public void sendPostRequestWithMissingFields(String endpoint) {&#10;        String payload = &quot;{\&quot;name\&quot;:\&quot;\&quot;}&quot;;&#10;        Response response = given()&#10;                .contentType(&quot;application/json&quot;)&#10;                .body(payload)&#10;                .post(TestConfig.BASE_URL + endpoint);&#10;        responseCode = response.getStatusCode();&#10;        responseBody = response.getBody().asString();&#10;    }&#10;&#10;    @And(&quot;the response should contain an error message stating invalid payload&quot;)&#10;    public void verifyInvalidPayloadErrorMessage() {&#10;        Assert.assertEquals(responseBody, &quot;{\&quot;error\&quot;:\&quot;Invalid payload\&quot;}&quot;);&#10;    }&#10;&#10;    @And(&quot;the response should include an error message stating that the employee was not found&quot;)&#10;    public void verifyEmployeeNotFoundErrorMessage() {&#10;        Assert.assertEquals(responseBody, &quot;{\&quot;error\&quot;:\&quot;Employee not found\&quot;}&quot;);&#10;    }&#10;&#10;    // READ EMPLOYEE STEPS&#10;    @When(&quot;I send a GET request to the employees API&quot;)&#10;    public void sendGetRequestToEmployeesApi() {&#10;        response = given()&#10;                .get(TestConfig.BASE_URL + &quot;/employees&quot;);&#10;        responseCode = response.getStatusCode();&#10;        responseBody = response.getBody().asString();&#10;    }&#10;&#10;    @Then(&quot;the response status should be {int}&quot;)&#10;    public void verifyResponseStatusCode(Integer statusCode) {&#10;        Assert.assertEquals(responseCode, statusCode.intValue());&#10;    }&#10;&#10;    @Then(&quot;the response should contain a list of employees&quot;)&#10;    public void verifyResponseContainsListOfEmployees() {&#10;        Assert.assertEquals(responseBody, &quot;[{\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;John Doe\&quot;,\&quot;role\&quot;:\&quot;Developer\&quot;},{\&quot;id\&quot;:2,\&quot;name\&quot;:\&quot;Jane Smith\&quot;,\&quot;role\&quot;:\&quot;Tester\&quot;}]&quot;);&#10;    }&#10;&#10;    @Given(&quot;an employee with id {int} exists&quot;)&#10;    public void ensureEmployeeWithidExists(int id) {&#10;        // This is left empty as WireMock is preconfigured&#10;    }&#10;&#10;    @Given(&quot;an existing employee with id {int}&quot;)&#10;    public void anExistingEmployeeWithId(int id) {&#10;        // No implementation needed, WireMock is preconfigured&#10;    }&#10;&#10;    @When(&quot;I send a GET request to the employee API with id {int}&quot;)&#10;    public void sendGetRequestToEmployeeApiWithid(int id) {&#10;        response = given()&#10;                .get(TestConfig.BASE_URL + &quot;/employees/&quot; + id);&#10;        responseCode = response.getStatusCode();&#10;        responseBody = response.getBody().asString();&#10;    }&#10;&#10;    @Then(&quot;the response should contain the employee details for id {int}&quot;)&#10;    public void verifyResponseContainsEmployeeDetailsForid(int id) {&#10;        Assert.assertEquals(responseBody, &quot;{\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;John Doe\&quot;,\&quot;role\&quot;:\&quot;Developer\&quot;}&quot;);&#10;    }&#10;&#10;    @When(&quot;I send a GET request to the employee API with a non-existent id {int}&quot;)&#10;    public void sendGetRequestToEmployeeApiWithNonExistentid(int id) {&#10;        response = given()&#10;                .get(TestConfig.BASE_URL + &quot;/employees/&quot; + id);&#10;        responseCode = response.getStatusCode();&#10;        responseBody = response.getBody().asString();&#10;    }&#10;&#10;    @Then(&quot;the response should contain an error message indicating the employee was not found&quot;)&#10;    public void verifyResponseContainsEmployeeNotFoundError() {&#10;        Assert.assertEquals(responseBody, (&quot;{\&quot;error\&quot;:\&quot;Employee not found\&quot;}&quot;));&#10;    }&#10;&#10;    @And(&quot;the update payload is valid&quot;)&#10;    public void updatePayloadIsValid() {&#10;        responseBody = &quot;{ \&quot;name\&quot;: \&quot;John Doe Updated\&quot;, \&quot;role\&quot;: \&quot;Lead\&quot; }&quot;;&#10;    }&#10;&#10;    @When(&quot;I send a PUT request to {string} with id {int}&quot;)&#10;    public void sendPutRequestToUpdateEmployee(String endpoint, int id) {&#10;        response = given()&#10;                .header(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                .body(responseBody)&#10;                .put(TestConfig.BASE_URL + endpoint + &quot;/&quot; + id);&#10;        responseCode = response.getStatusCode();&#10;        responseBody = response.getBody().asString();&#10;    }&#10;&#10;    @And(&quot;the response should contain the updated employee details&quot;)&#10;    public void verifyResponseContainsUpdatedEmployeeDetails() {&#10;        String name = response.jsonPath().getString(&quot;name&quot;);&#10;        String role = response.jsonPath().getString(&quot;role&quot;);&#10;        Assert.assertEquals(name, &quot;John Doe Updated&quot;);&#10;        Assert.assertEquals(role, &quot;Lead&quot;);&#10;    }&#10;&#10;    @Given(&quot;no employee exists with id {int}&quot;)&#10;    public void noEmployeeExistsWithId(int id) {&#10;        // No implementation needed, WireMock is preconfigured for 404&#10;    }&#10;&#10;    @And(&quot;the update payload is missing required fields&quot;)&#10;    public void updatePayloadIsMissingRequiredFields() {&#10;        responseBody = &quot;{ \&quot;name\&quot;: \&quot;\&quot; }&quot;;&#10;    }&#10;&#10;    // DELETE EMPLOYEE STEPS&#10;    @When(&quot;I send a DELETE request to {string} with id {int}&quot;)&#10;    public void sendDeleteRequestToEmployee(String endpoint, int id) {&#10;        response = given()&#10;                .header(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                .delete(TestConfig.BASE_URL + endpoint + &quot;/&quot; + id);&#10;        responseCode = response.getStatusCode();&#10;        responseBody = response.getBody().asString();&#10;    }&#10;&#10;    @And(&quot;the employee should no longer exist&quot;)&#10;    public void verifyEmployeeNoLongerExists() {&#10;        // Optionally, you could send a GET request to confirm 404, but here just assert 204 was received&#10;        Assert.assertEquals(responseCode, 204);&#10;    }&#10;&#10;    @And(&quot;the response should contain an error message stating invalid id&quot;)&#10;    public void verifyResponseContainsInvalidIdErrorMessage() {&#10;        Assert.assertTrue(responseBody.contains(&quot;invalid id&quot;) || responseBody.contains(&quot;Employee not found&quot;));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/steps/ReadEmployeeSteps.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/steps/ReadEmployeeSteps.java" />
              <option name="originalContent" value="package steps;&#10;&#10;import config.TestConfig;&#10;import io.cucumber.java.en.Given;&#10;import io.cucumber.java.en.Then;&#10;import io.cucumber.java.en.When;&#10;import org.testng.Assert;&#10;import org.testng.annotations.AfterClass;&#10;import org.testng.annotations.BeforeClass;&#10;&#10;import java.net.HttpURLConnection;&#10;import java.net.URL;&#10;import java.util.Scanner;&#10;&#10;public class ReadEmployeeSteps {&#10;    private int responseCode;&#10;    private String responseBody;&#10;&#10;    @BeforeClass&#10;    public void startWireMockServer() {&#10;        TestConfig.startWireMock();&#10;    }&#10;&#10;    @AfterClass&#10;    public void stopWireMockServer() {&#10;        TestConfig.stopWireMock();&#10;    }&#10;&#10;    @When(&quot;I send a GET request to the employees API&quot;)&#10;    public void sendGetRequestToEmployeesApi() throws Exception {&#10;        URL url = new URL(TestConfig.BASE_URL + &quot;/employees&quot;);&#10;        HttpURLConnection conn = (HttpURLConnection) url.openConnection();&#10;        conn.setRequestMethod(&quot;GET&quot;);&#10;        responseCode = conn.getResponseCode();&#10;        Scanner scanner = new Scanner(conn.getInputStream());&#10;        StringBuilder sb = new StringBuilder();&#10;        while (scanner.hasNext()) {&#10;            sb.append(scanner.nextLine());&#10;        }&#10;        scanner.close();&#10;        responseBody = sb.toString();&#10;    }&#10;&#10;    @Then(&quot;the response status should be {int}&quot;)&#10;    public void verifyResponseStatusCode(Integer statusCode) {&#10;        Assert.assertEquals(responseCode, statusCode);&#10;    }&#10;&#10;    @Then(&quot;the response should contain a list of employees&quot;)&#10;    public void verifyResponseContainsListOfEmployees() {&#10;        Assert.assertEquals(responseBody, &quot;[{\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;John Doe\&quot;,\&quot;role\&quot;:\&quot;Developer\&quot;},{\&quot;id\&quot;:2,\&quot;name\&quot;:\&quot;Jane Smith\&quot;,\&quot;role\&quot;:\&quot;Tester\&quot;}]&quot;);&#10;    }&#10;&#10;    @Given(&quot;an employee with ID {int} exists&quot;)&#10;    public void ensureEmployeeWithIdExists(int id) {&#10;        // This is left empty as WireMock is preconfigured&#10;    }&#10;&#10;    @When(&quot;I send a GET request to the employee API with ID {int}&quot;)&#10;    public void sendGetRequestToEmployeeApiWithId(int id) throws Exception {&#10;        URL url = new URL(TestConfig.BASE_URL + &quot;/employees/&quot; + id);&#10;        HttpURLConnection conn = (HttpURLConnection) url.openConnection();&#10;        conn.setRequestMethod(&quot;GET&quot;);&#10;        responseCode = conn.getResponseCode();&#10;        Scanner scanner = new Scanner(conn.getInputStream());&#10;        StringBuilder sb = new StringBuilder();&#10;        while (scanner.hasNext()) {&#10;            sb.append(scanner.nextLine());&#10;        }&#10;        scanner.close();&#10;        responseBody = sb.toString();&#10;    }&#10;&#10;    @Then(&quot;the response should contain the employee details for ID {int}&quot;)&#10;    public void verifyResponseContainsEmployeeDetailsForId(int id) {&#10;        Assert.assertEquals(responseBody, &quot;{\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;John Doe\&quot;,\&quot;role\&quot;:\&quot;Developer\&quot;}&quot;);&#10;    }&#10;&#10;    @When(&quot;I send a GET request to the employee API with a non-existent ID {int}&quot;)&#10;    public void sendGetRequestToEmployeeApiWithNonExistentId(int id) throws Exception {&#10;        URL url = new URL(TestConfig.BASE_URL + &quot;/employees/&quot; + id);&#10;        HttpURLConnection conn = (HttpURLConnection) url.openConnection();&#10;        conn.setRequestMethod(&quot;GET&quot;);&#10;        responseCode = conn.getResponseCode();&#10;        Scanner scanner = new Scanner(conn.getErrorStream());&#10;        StringBuilder sb = new StringBuilder();&#10;        while (scanner.hasNext()) {&#10;            sb.append(scanner.nextLine());&#10;        }&#10;        scanner.close();&#10;        responseBody = sb.toString();&#10;    }&#10;&#10;    @Then(&quot;the response should contain an error message indicating the employee was not found&quot;)&#10;    public void verifyResponseContainsEmployeeNotFoundError() {&#10;        Assert.assertEquals(responseBody, (&quot;{\&quot;error\&quot;:\&quot;Employee not found\&quot;}&quot;));&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package steps;&#10;&#10;import config.TestConfig;&#10;import io.cucumber.java.en.Given;&#10;import io.cucumber.java.en.Then;&#10;import io.cucumber.java.en.When;&#10;import io.cucumber.java.en.And;&#10;import io.restassured.RestAssured;&#10;import io.restassured.response.Response;&#10;import org.testng.Assert;&#10;import org.testng.annotations.AfterClass;&#10;import org.testng.annotations.BeforeClass;&#10;&#10;public class EmployeeSteps {&#10;    private int responseCode;&#10;    private String responseBody;&#10;    private Response response;&#10;&#10;    @BeforeClass&#10;    public void startWireMockServer() {&#10;        TestConfig.startWireMock();&#10;    }&#10;&#10;    @AfterClass&#10;    public void stopWireMockServer() {&#10;        TestConfig.stopWireMock();&#10;    }&#10;&#10;    // CREATE EMPLOYEE STEPS&#10;    @When(&quot;I send a POST request to {string}&quot;)&#10;    public void sendPostRequestToEmployees(String endpoint) {&#10;        String payload = &quot;{ \&quot;name\&quot;: \&quot;Bob Lee\&quot;, \&quot;role\&quot;: \&quot;Designer\&quot; }&quot;;&#10;        response = RestAssured&#10;                .given()&#10;                .header(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                .body(payload)&#10;                .post(endpoint);&#10;        responseCode = response.getStatusCode();&#10;        responseBody = response.getBody().asString();&#10;    }&#10;&#10;    @And(&quot;the response should contain the employee details&quot;)&#10;    public void verifyResponseContainsEmployeeDetails() {&#10;        String name = response.jsonPath().getString(&quot;name&quot;);&#10;        String role = response.jsonPath().getString(&quot;role&quot;);&#10;        Assert.assertEquals(name, &quot;Bob Lee&quot;);&#10;        Assert.assertEquals(role, &quot;Designer&quot;);&#10;    }&#10;&#10;    // READ EMPLOYEE STEPS&#10;    @When(&quot;I send a GET request to the employees API&quot;)&#10;    public void sendGetRequestToEmployeesApi() {&#10;        response = RestAssured&#10;                .given()&#10;                .get(TestConfig.BASE_URL + &quot;/employees&quot;);&#10;        responseCode = response.getStatusCode();&#10;        responseBody = response.getBody().asString();&#10;    }&#10;&#10;    @Then(&quot;the response status should be {int}&quot;)&#10;    public void verifyResponseStatusCode(Integer statusCode) {&#10;        Assert.assertEquals(responseCode, statusCode.intValue());&#10;    }&#10;&#10;    @Then(&quot;the response should contain a list of employees&quot;)&#10;    public void verifyResponseContainsListOfEmployees() {&#10;        Assert.assertEquals(responseBody, &quot;[{\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;John Doe\&quot;,\&quot;role\&quot;:\&quot;Developer\&quot;},{\&quot;id\&quot;:2,\&quot;name\&quot;:\&quot;Jane Smith\&quot;,\&quot;role\&quot;:\&quot;Tester\&quot;}]&quot;);&#10;    }&#10;&#10;    @Given(&quot;an employee with ID {int} exists&quot;)&#10;    public void ensureEmployeeWithIdExists(int id) {&#10;        // This is left empty as WireMock is preconfigured&#10;    }&#10;&#10;    @When(&quot;I send a GET request to the employee API with ID {int}&quot;)&#10;    public void sendGetRequestToEmployeeApiWithId(int id) {&#10;        response = RestAssured&#10;                .given()&#10;                .get(TestConfig.BASE_URL + &quot;/employees/&quot; + id);&#10;        responseCode = response.getStatusCode();&#10;        responseBody = response.getBody().asString();&#10;    }&#10;&#10;    @Then(&quot;the response should contain the employee details for ID {int}&quot;)&#10;    public void verifyResponseContainsEmployeeDetailsForId(int id) {&#10;        Assert.assertEquals(responseBody, &quot;{\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;John Doe\&quot;,\&quot;role\&quot;:\&quot;Developer\&quot;}&quot;);&#10;    }&#10;&#10;    @When(&quot;I send a GET request to the employee API with a non-existent ID {int}&quot;)&#10;    public void sendGetRequestToEmployeeApiWithNonExistentId(int id) {&#10;        response = RestAssured&#10;                .given()&#10;                .get(TestConfig.BASE_URL + &quot;/employees/&quot; + id);&#10;        responseCode = response.getStatusCode();&#10;        responseBody = response.getBody().asString();&#10;    }&#10;&#10;    @Then(&quot;the response should contain an error message indicating the employee was not found&quot;)&#10;    public void verifyResponseContainsEmployeeNotFoundError() {&#10;        Assert.assertEquals(responseBody, (&quot;{\&quot;error\&quot;:\&quot;Employee not found\&quot;}&quot;));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>